?filter
runApp('HDWDashboard')
runApp('HDWDashboard')
updateSelectInput(
session,
inputId = "source",
choices = over_time_complete$Date,
selected = tail(over_time_complete$Date)
)
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp()
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
?plotOutput
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
?dateRangeInput
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Controls", tabName = 'controls', icon = icon('sliders-h')),
menuItem("Graphs", tabName = 'graphs', icon = icon('chart-area')),
sliderInput("bins","Number of bins", min = 1, max = 100, value = 50),
dateRangeInput("dates",h3("Date Range"), start = min(over_time_complete$Date), end = max(over_time_complete$Date))
)
)
runApp('HDWDashboard')
runApp('Shinydashboard')
runApp('HDWDashboard')
runApp('Shinydashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
install.packages(shinyjs)
install.packages("shinyjs")
library(shinyjs)
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('HDWDashboard')
runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
install.packages('googleVis')
runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
install.packages('dt')
install.packages('DT')
runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
install.packages('FrissC3charts')
install.packages(c("DT", "googleVis"))
install.packages(c("DT", "googleVis"))
shiny::runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
runApp('Shinydashboard')
runApp('C:/Users/lblakely/Downloads/dashboard_showcase-master/app')
insta
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages('plotly')
install.packages("devtools")
shiny::runApp('HDWDashboard')
install()
runApp('HDWDashboard')
devtools::create("C3")
setwd('C3')
scaffoldWidget('C3Gauge', edit = FALSE)
install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install('C3')
devtools::install('C3')
devtools::install('C3')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(wesanderson)
library(plyr)
library(tibble)
library(dplyr)
library(readxl)
library(haven)
library(DescTools)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
#devtools::install()
library(C3)
#read in data
inputdata <- readxl::read_excel("~/Book1.xlsx")
drones_removed <- inputdata
#set up values for messageData
inspectedBy <- inputdata$nisc_inspected_by
inspectedComments <- inputdata$InspNotes
inspectedDate <- inputdata$nisc_inspected_date
#create messageData and remove N/A values
messageData <- data.frame("from" = inspectedBy, "message" = inspectedComments,"datetime" = inspectedDate)
messageData <- messageData %>% drop_na
#creates percent complete
total <- sum(inputdata$A_TTTotal)
complete <- sum(inputdata$A_TTComplete)
percent <- (complete/total)*100
percent <- data.frame(percent)
percent$percent <- round(percent$percent)
#formulas
grouping_totals <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTComplete > 0) %>%
summarize(count = n())
return(out)
}
grouping_totals_incomplete <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTInComplete > 0) %>%
summarize(count = n())
return(out)
}
count_by_type <- function(table,df){
require("dplyr")
require("lazyeval")
out <- table %>% group_by_(df) %>% summarise(count = n())
return(out)
}
#creates data set for date graphing
over_time_complete <- grouping_totals("nisc_inspected_date")
over_time_complete <- over_time_complete %>% separate(nisc_inspected_date, c('Date','Time'),' ', extra = 'merge',)
over_time_complete <- over_time_complete %>% mutate(Date = as.Date(Date))
over_time_complete <- over_time_complete %>% ddply("Date",numcolwise(sum))
over_time_complete$Date <- as.Date(over_time_complete$Date, format = "%Y-%m-%d")
#creates badgestats and gives it a value
if(percent > 50){
badgestats <- "success"
colorizer <- "green"
}
if(50 > percent & percent > 20){
badgestats <- "warning"
colorizer <- 'yellow'
}else{
badgestats <- "danger"
colorizer <- "red"
}
header <- dashboardHeader(title = "Drone Inspection HDW", dropdownMenuOutput("messageMenu"), dropdownMenuOutput("tasks"))
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Controls", tabName = 'controls', icon = icon('sliders-h')),
menuItem("Graphs", tabName = 'graphs', icon = icon('chart-area')),
sliderInput("bins","Number of bins", min = 1, max = 100, value = 50),
dateRangeInput("dates",h3("Date Range"), min = min(over_time_complete$Date), max = max(over_time_complete$Date),start = min(over_time_complete$Date), end = max(over_time_complete$Date))
)
)
body <- dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
C3Gauge("")
),
tabItem(tabName = 'controls',
h2('Controls Content')
),
tabItem( tabName = "graphs",
fluidRow(
box( width = 5, title = 'Complete to Date',status = badgestats, solidHeader = TRUE,
plotOutput("dateRange")
)
)
)
)
)
ui <- dashboardPage(skin = "green",
header, sidebar, body
)
server <- function(input, output, session){
#sets up the message menu for the comments
output$messageMenu <- renderMenu({
msgs <- apply(messageData, 1, function(row) {
messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
})
dropdownMenu(type = "messages", .list = msgs)
})
#sets up the values for the tasks menu
output$tasks <- renderMenu({
nsgs <- apply(percent, 1, function(row){
taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
})
dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
})
#outputs a graph based on the date inputs in the sidebar
output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))
}
shinyApp(ui = ui, server = server)
runApp('~/testin')
devtools::install()
runApp('~/testin')
devtools::install()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
library(C#)
library(C#)
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
htmlwidgets::scaffoldWidget("C3pie", edit = FALSE
)
htmlwidgets::scaffoldWidget("C3pie", edit = FALSE)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
body <- dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
C3GaugeOutput("gauge1"),
actionButton("Update","update gauge"),
C3Pie(values = list(data1=200,data2=300,data3=100))
),
tabItem(tabName = 'controls',
h2('Controls Content')
),
tabItem( tabName = "graphs",
fluidRow(
box( width = 5, title = 'Complete to Date',status = badgestats, solidHeader = TRUE,
plotOutput("dateRange")
)
)
)
)
)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
htmlwidgets::scaffoldWidget("C3LineBarChart", edit = FALSE)
library(C3)
htmlwidgets::scaffoldWidget("C3LineBarChart", edit = FALSE)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
colors      <- list(Total="gray",GREEN="Green",RED="Red")
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
htmlwidgets::scaffoldWidget(C3StackedAreaChart)
htmlwidgets::scaffoldWidget('C3StackedAreaChart')
devtools::install()
library(C3)
runApp('~/Shinydashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
cat("\nyou clicked on a pie with pie slice data:", input$pie1_click)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
library(C3)
runApp('~/HDWDashboard')
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(wesanderson)
library(plyr)
library(tibble)
library(dplyr)
library(readxl)
library(haven)
library(DescTools)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
#devtools::install()
library(C3)
#read in data
inputdata <- readxl::read_excel("~/Book1.xlsx")
drones_removed <- inputdata
#set up values for messageData
inspectedBy <- inputdata$nisc_inspected_by
inspectedComments <- inputdata$InspNotes
inspectedDate <- inputdata$nisc_inspected_date
#create messageData and remove N/A values
messageData <- data.frame("from" = inspectedBy, "message" = inspectedComments,"datetime" = inspectedDate)
messageData <- messageData %>% drop_na
#creates percent complete
total <- sum(inputdata$A_TTTotal)
complete <- sum(inputdata$A_TTComplete)
percent <- (complete/total)*100
percent <- data.frame(percent)
percent$percent <- round(percent$percent)
#formulas
grouping_totals <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTComplete > 0) %>%
summarize(count = n())
return(out)
}
grouping_totals_incomplete <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTInComplete > 0) %>%
summarize(count = n())
return(out)
}
count_by_type <- function(table,df){
require("dplyr")
require("lazyeval")
out <- table %>% group_by_(df) %>% summarise(count = n())
return(out)
}
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
colors      <- list(Total="gray",GREEN="Green",RED="Red")
#creates data set for date graphing
over_time_complete <- grouping_totals("nisc_inspected_date")
over_time_complete <- over_time_complete %>% separate(nisc_inspected_date, c('Date','Time'),' ', extra = 'merge',)
over_time_complete <- over_time_complete %>% mutate(Date = as.Date(Date))
over_time_complete <- over_time_complete %>% ddply("Date",numcolwise(sum))
over_time_complete$Date <- as.Date(over_time_complete$Date, format = "%Y-%m-%d")
#creates badgestats and gives it a value
if(percent > 50){
badgestats <- "success"
colorizer <- "green"
}
if(50 > percent & percent > 20){
badgestats <- "warning"
colorizer <- 'yellow'
}else{
badgestats <- "danger"
colorizer <- "red"
}
header <- dashboardHeader(title = "Drone Inspection HDW", dropdownMenuOutput("messageMenu"), dropdownMenuOutput("tasks"))
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Controls", tabName = 'controls', icon = icon('sliders-h')),
menuItem("Graphs", tabName = 'graphs', icon = icon('chart-area')),
sliderInput("bins","Number of bins", min = 1, max = 100, value = 50),
dateRangeInput("dates",h3("Date Range"), min = min(over_time_complete$Date), max = max(over_time_complete$Date),start = min(over_time_complete$Date), end = max(over_time_complete$Date))
)
)
body <- dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
C3GaugeOutput("gauge1"),
actionButton("Update","update gauge"),
C3Pie(values = list(data1=200,data2=300,data3=100)),
C3LineBarChart(dataset = dataset, colors = colors)
),
tabItem(tabName = 'controls',
h2('Controls Content')
),
tabItem( tabName = "graphs",
fluidRow(
box( width = 5, title = 'Complete to Date',status = badgestats, solidHeader = TRUE,
plotOutput("dateRange")
),
C3StackedAreaChart(dataset = dataset, colors = colors)
)
)
)
)
ui <- dashboardPage(skin = "green",
header, sidebar, body
)
server <- function(input, output, session){
#sets up the message menu for the comments
output$messageMenu <- renderMenu({
msgs <- apply(messageData, 1, function(row) {
messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
})
dropdownMenu(type = "messages", .list = msgs)
})
#sets up the values for the tasks menu
output$tasks <- renderMenu({
nsgs <- apply(percent, 1, function(row){
taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
})
dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
})
#outputs a graph based on the date inputs in the sidebar
output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))
value = reactive({
input$Update
round(runif(1,0,100),2)
})
output$gauge1 <- renderC3Gauge({
C3Gauge(value())
})
observeEvent(input$pie_click,{
cat("\nyou clicked on a pie with pie slice data:", input$pie1_click)
})
}
shinyApp(ui = ui, server = server)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
devtools::install()
library(C3)
dropdownMenu(type = "messages", .list = msgs)
runApp('~/HDWDashboard')
